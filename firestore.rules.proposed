rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() { return request.auth != null; }
    function isSelf(uid) { return request.auth.uid == uid; }
    function hasRole(role) {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    match /users/{userId} {
      allow read, write: if isSelf(userId);
    }

    match /patients/{patientId} {
      allow read: if isSelf(patientId) || hasRole('professional');
      allow write: if isSelf(patientId) || hasRole('professional');
    }

    match /wounds/{woundId} {
      allow read, write: if isSignedIn();
    }

    match /assessments/{assessmentId} {
      allow create: if isSignedIn();
      allow read: if isSignedIn();
      allow update, delete: if hasRole('professional');
    }

    match /media/{mediaId} {
      allow create, read: if isSignedIn();
      allow delete: if hasRole('professional');
    }

    match /consents/{consentId} {
      allow read, create: if isSelf(request.resource.data.patientId);
      allow update, delete: if isSelf(resource.data.patientId);
    }

    match /audit/{docId} {
      allow read: if hasRole('admin');
      allow write: if false; // somente via backend
    }
  }
}


