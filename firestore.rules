
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can read public profiles, but only write to their own.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth.uid == userId;
    }

    // A professional can manage all documents within their own user document.
    // This includes anamnesis, reports, comparisons, etc.
    match /users/{userId}/{collectionId}/{docId} {
      allow read, write: if request.auth.uid == userId && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'professional';
    }

    // A patient can read reports created for them, across all professionals.
    // This rule enables collectionGroup queries for patients.
    match /{path=**}/reports/{reportId} {
        allow get: if request.auth != null && (
          // Allow professional who created it
          (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'professional' && resource.data.professionalId == request.auth.uid) ||
          // Allow patient it belongs to
          resource.data.patientId == request.auth.uid
        );
         allow list: if request.auth != null && (
          // Allow professional who created it to list their own reports
          (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'professional' && request.query.path[2] == request.auth.uid) ||
          // Allow patient to query across all reports for their ID
          (request.query.path.size() == 1 && request.query.filters.size() > 0 && 'patientId' in request.query.filters[0].field)
        );
    }
    
    // Chat messages can only be read/written by the two participants in the chat.
    match /chats/{chatId}/messages/{messageId} {
        allow read, write: if request.auth != null && request.auth.uid in chatId.split('_');
    }
  }
}
